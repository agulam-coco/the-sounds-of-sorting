package edu.grinnell.csc207.soundsofsorting.sorts;

import java.util.List;

import edu.grinnell.csc207.soundsofsorting.sortevents.SortEvent;

import java.util.Arrays;

/**
 * A collection of sorting algorithms.
 */
public class Sorts {

    /**
     * Swaps indices <code>i</code> and <code>j</code> of array
     * <code>arr</code>.
     *
     * @param <T> the carrier type of the array
     * @param arr the array to swap
     * @param i the first index to swap
     * @param j the second index to swap
     */
    public static <T> void swap(T[] arr, int i, int j) {
        T tmp = arr[i];
        arr[i] = arr[j];
        arr[j] = tmp;
    }

    /**
     * Sorts the array according to the bubble sort algorithm:
     * <pre>
     * [ unprocessed | i largest elements in order ]
     * </pre>
     *
     * @param <T> the carrier type of the array
     * @param arr the array to sort
     * @return the sort events generated by this sort
     */
    public static <T extends Comparable<? super T>> List<SortEvent<Integer>> bubbleSort(T[] arr) {
        for (int i = arr.length; i > 0; i--) {
            for (int j = 0; j < i - 1; j++) {
                if (arr[j].compareTo(arr[j + 1]) > 0) {
                    swap(arr, j, j + 1);
                }
            }
        }
        return null;
    }

    /**
     * Sorts the array according to the selection sort algorithm:
     * <pre>
     * [ i smallest elements in order | unprocessed ]
     * </pre>
     *
     * @param <T> the carrier type of the array
     * @param arr the array to sort
     * @return the sort events generated by this sort
     */
    public static <T extends Comparable<? super T>> List<SortEvent<Integer>> selectionSort(
            T[] arr) {
        for (int i = 0; i < arr.length - 1; i++) {
            int smallestIndex = i;
            for (int j = i + 1; j < arr.length; j++) {
                if (arr[j].compareTo(arr[smallestIndex]) < 0) {
                    smallestIndex = j;
                }
            }

            //Do not waste resources if there is nothing to be done
            if (smallestIndex != i) {
                swap(arr, i, smallestIndex);
            }
        }

        return null;
    }

    /**
     * Sorts the array according to the insertion sort algorithm:
     * <pre>
     * [ i elements in order | unprocessed ]
     * </pre>
     *
     * @param <T> the carrier type of the array
     * @param arr the array to sort
     * @return the sort events generated by this sort
     */
    public static <T extends Comparable<? super T>> List<SortEvent<Integer>> insertionSort(
            T[] arr) {
        for (int i = 1; i < arr.length; i++) {
            for (int j = i; j > 0; j--) {
                if (arr[j].compareTo(arr[j - 1]) < 0) {
                    swap(arr, j, j - 1);
                }
            }
        }
        return null;
    }

    /**
     * Sorts the array according to the merge sort algorithm.
     *
     * @param <T> the carrier type of the array
     * @param arr the array to sort
     * @return the sort events generated by this sort
     */
    public static <T extends Comparable<? super T>> List<SortEvent<Integer>> mergeSort(
            T[] arr) {

        int low = 0;
        int high = arr.length - 1;

        T[] newArr = mergeSortRecursive(arr, low, high);

        System.arraycopy(newArr, 0, arr, 0, newArr.length);

        return null;
    }

    /**
     * Peforms recursive merge on an array With left and right halves sorted in
     * order
     *
     * @param <T> the carrier type of the array
     * @param arr1 the first array to merge
     * @param arr2 the second array to merge
     * @return a sorted array
     */
    public static <T extends Comparable<? super T>> T[] merge(T[] arr1, T[] arr2) {
        int leftCount = 0;
        int rightCount = 0;
        int newArraySize = 0;

        T[] returnArray = Arrays.copyOf(arr1, arr1.length + arr2.length);

        while (newArraySize < arr1.length + arr2.length) {
            if (leftCount < arr1.length && rightCount < arr2.length) {
                if (arr1[leftCount].compareTo(arr2[rightCount]) < 0) {
                    returnArray[newArraySize] = arr1[leftCount];
                    leftCount++;
                } else {
                    returnArray[newArraySize] = arr2[rightCount];
                    rightCount++;
                }
            } else if (leftCount < arr1.length) {
                returnArray[newArraySize] = arr1[leftCount];
                leftCount++;
            } else {
                returnArray[newArraySize] = arr2[rightCount];
                rightCount++;
            }
            newArraySize++;

        }
        System.out.println(Arrays.toString(returnArray));

        return returnArray;
    }

    public static <T extends Comparable<? super T>> T[] mergeSortRecursive(T[] arr, int left, int right) {
        //base case 
        int mid = left + (right - left) / 2;

        if (left == right) {
            return Arrays.copyOfRange(arr, left, right + 1);
        }
        //sortleft
        T[] leftArray = mergeSortRecursive(arr, left, mid);

        //sortright
        T[] rightArray = mergeSortRecursive(arr, mid + 1, right);

        //sortMerge
        return merge(leftArray, rightArray);
    }

    /**
     * Sorts the array according to the quick sort algorithm.
     *
     * @param <T> the carrier type of the array
     * @param arr the array to sort
     * @return the sort events generated by this sort
     */
    public static <T extends Comparable<? super T>> List<SortEvent<Integer>> quickSort(T[] arr) {
        // TODO: fill me in!
        return null;
    }
}
